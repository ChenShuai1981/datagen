/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.datacloud.cybertron.protocol.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class DataSourceExecutionCommonRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5126145532351245223L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DataSourceExecutionCommonRecord\",\"namespace\":\"com.datacloud.cybertron.protocol.avro\",\"fields\":[{\"name\":\"dataSourceId\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"tenantId\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"requestId\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"region\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"templateName\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"requestTime\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"responseResultTime\",\"type\":[\"null\",\"long\"],\"default\":null},{\"name\":\"source\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null},{\"name\":\"status\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DataSourceExecutionCommonRecord> ENCODER =
      new BinaryMessageEncoder<DataSourceExecutionCommonRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DataSourceExecutionCommonRecord> DECODER =
      new BinaryMessageDecoder<DataSourceExecutionCommonRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<DataSourceExecutionCommonRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<DataSourceExecutionCommonRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DataSourceExecutionCommonRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this DataSourceExecutionCommonRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a DataSourceExecutionCommonRecord from a ByteBuffer. */
  public static DataSourceExecutionCommonRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.Long dataSourceId;
  @Deprecated public java.lang.Long tenantId;
  @Deprecated public java.lang.String requestId;
  @Deprecated public java.lang.String region;
  @Deprecated public java.lang.String templateName;
  @Deprecated public java.lang.Long requestTime;
  @Deprecated public java.lang.Long responseResultTime;
  @Deprecated public java.lang.String source;
  @Deprecated public java.lang.String status;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DataSourceExecutionCommonRecord() {}

  /**
   * All-args constructor.
   * @param dataSourceId The new value for dataSourceId
   * @param tenantId The new value for tenantId
   * @param requestId The new value for requestId
   * @param region The new value for region
   * @param templateName The new value for templateName
   * @param requestTime The new value for requestTime
   * @param responseResultTime The new value for responseResultTime
   * @param source The new value for source
   * @param status The new value for status
   */
  public DataSourceExecutionCommonRecord(java.lang.Long dataSourceId, java.lang.Long tenantId, java.lang.String requestId, java.lang.String region, java.lang.String templateName, java.lang.Long requestTime, java.lang.Long responseResultTime, java.lang.String source, java.lang.String status) {
    this.dataSourceId = dataSourceId;
    this.tenantId = tenantId;
    this.requestId = requestId;
    this.region = region;
    this.templateName = templateName;
    this.requestTime = requestTime;
    this.responseResultTime = responseResultTime;
    this.source = source;
    this.status = status;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return dataSourceId;
    case 1: return tenantId;
    case 2: return requestId;
    case 3: return region;
    case 4: return templateName;
    case 5: return requestTime;
    case 6: return responseResultTime;
    case 7: return source;
    case 8: return status;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: dataSourceId = (java.lang.Long)value$; break;
    case 1: tenantId = (java.lang.Long)value$; break;
    case 2: requestId = (java.lang.String)value$; break;
    case 3: region = (java.lang.String)value$; break;
    case 4: templateName = (java.lang.String)value$; break;
    case 5: requestTime = (java.lang.Long)value$; break;
    case 6: responseResultTime = (java.lang.Long)value$; break;
    case 7: source = (java.lang.String)value$; break;
    case 8: status = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'dataSourceId' field.
   * @return The value of the 'dataSourceId' field.
   */
  public java.lang.Long getDataSourceId() {
    return dataSourceId;
  }

  /**
   * Sets the value of the 'dataSourceId' field.
   * @param value the value to set.
   */
  public void setDataSourceId(java.lang.Long value) {
    this.dataSourceId = value;
  }

  /**
   * Gets the value of the 'tenantId' field.
   * @return The value of the 'tenantId' field.
   */
  public java.lang.Long getTenantId() {
    return tenantId;
  }

  /**
   * Sets the value of the 'tenantId' field.
   * @param value the value to set.
   */
  public void setTenantId(java.lang.Long value) {
    this.tenantId = value;
  }

  /**
   * Gets the value of the 'requestId' field.
   * @return The value of the 'requestId' field.
   */
  public java.lang.String getRequestId() {
    return requestId;
  }

  /**
   * Sets the value of the 'requestId' field.
   * @param value the value to set.
   */
  public void setRequestId(java.lang.String value) {
    this.requestId = value;
  }

  /**
   * Gets the value of the 'region' field.
   * @return The value of the 'region' field.
   */
  public java.lang.String getRegion() {
    return region;
  }

  /**
   * Sets the value of the 'region' field.
   * @param value the value to set.
   */
  public void setRegion(java.lang.String value) {
    this.region = value;
  }

  /**
   * Gets the value of the 'templateName' field.
   * @return The value of the 'templateName' field.
   */
  public java.lang.String getTemplateName() {
    return templateName;
  }

  /**
   * Sets the value of the 'templateName' field.
   * @param value the value to set.
   */
  public void setTemplateName(java.lang.String value) {
    this.templateName = value;
  }

  /**
   * Gets the value of the 'requestTime' field.
   * @return The value of the 'requestTime' field.
   */
  public java.lang.Long getRequestTime() {
    return requestTime;
  }

  /**
   * Sets the value of the 'requestTime' field.
   * @param value the value to set.
   */
  public void setRequestTime(java.lang.Long value) {
    this.requestTime = value;
  }

  /**
   * Gets the value of the 'responseResultTime' field.
   * @return The value of the 'responseResultTime' field.
   */
  public java.lang.Long getResponseResultTime() {
    return responseResultTime;
  }

  /**
   * Sets the value of the 'responseResultTime' field.
   * @param value the value to set.
   */
  public void setResponseResultTime(java.lang.Long value) {
    this.responseResultTime = value;
  }

  /**
   * Gets the value of the 'source' field.
   * @return The value of the 'source' field.
   */
  public java.lang.String getSource() {
    return source;
  }

  /**
   * Sets the value of the 'source' field.
   * @param value the value to set.
   */
  public void setSource(java.lang.String value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.String getStatus() {
    return status;
  }

  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.String value) {
    this.status = value;
  }

  /**
   * Creates a new DataSourceExecutionCommonRecord RecordBuilder.
   * @return A new DataSourceExecutionCommonRecord RecordBuilder
   */
  public static com.datacloud.cybertron.protocol.avro.DataSourceExecutionCommonRecord.Builder newBuilder() {
    return new com.datacloud.cybertron.protocol.avro.DataSourceExecutionCommonRecord.Builder();
  }

  /**
   * Creates a new DataSourceExecutionCommonRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DataSourceExecutionCommonRecord RecordBuilder
   */
  public static com.datacloud.cybertron.protocol.avro.DataSourceExecutionCommonRecord.Builder newBuilder(com.datacloud.cybertron.protocol.avro.DataSourceExecutionCommonRecord.Builder other) {
    return new com.datacloud.cybertron.protocol.avro.DataSourceExecutionCommonRecord.Builder(other);
  }

  /**
   * Creates a new DataSourceExecutionCommonRecord RecordBuilder by copying an existing DataSourceExecutionCommonRecord instance.
   * @param other The existing instance to copy.
   * @return A new DataSourceExecutionCommonRecord RecordBuilder
   */
  public static com.datacloud.cybertron.protocol.avro.DataSourceExecutionCommonRecord.Builder newBuilder(com.datacloud.cybertron.protocol.avro.DataSourceExecutionCommonRecord other) {
    return new com.datacloud.cybertron.protocol.avro.DataSourceExecutionCommonRecord.Builder(other);
  }

  /**
   * RecordBuilder for DataSourceExecutionCommonRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DataSourceExecutionCommonRecord>
    implements org.apache.avro.data.RecordBuilder<DataSourceExecutionCommonRecord> {

    private java.lang.Long dataSourceId;
    private java.lang.Long tenantId;
    private java.lang.String requestId;
    private java.lang.String region;
    private java.lang.String templateName;
    private java.lang.Long requestTime;
    private java.lang.Long responseResultTime;
    private java.lang.String source;
    private java.lang.String status;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.datacloud.cybertron.protocol.avro.DataSourceExecutionCommonRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.dataSourceId)) {
        this.dataSourceId = data().deepCopy(fields()[0].schema(), other.dataSourceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tenantId)) {
        this.tenantId = data().deepCopy(fields()[1].schema(), other.tenantId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.requestId)) {
        this.requestId = data().deepCopy(fields()[2].schema(), other.requestId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.region)) {
        this.region = data().deepCopy(fields()[3].schema(), other.region);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.templateName)) {
        this.templateName = data().deepCopy(fields()[4].schema(), other.templateName);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.requestTime)) {
        this.requestTime = data().deepCopy(fields()[5].schema(), other.requestTime);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.responseResultTime)) {
        this.responseResultTime = data().deepCopy(fields()[6].schema(), other.responseResultTime);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.source)) {
        this.source = data().deepCopy(fields()[7].schema(), other.source);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.status)) {
        this.status = data().deepCopy(fields()[8].schema(), other.status);
        fieldSetFlags()[8] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing DataSourceExecutionCommonRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.datacloud.cybertron.protocol.avro.DataSourceExecutionCommonRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.dataSourceId)) {
        this.dataSourceId = data().deepCopy(fields()[0].schema(), other.dataSourceId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.tenantId)) {
        this.tenantId = data().deepCopy(fields()[1].schema(), other.tenantId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.requestId)) {
        this.requestId = data().deepCopy(fields()[2].schema(), other.requestId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.region)) {
        this.region = data().deepCopy(fields()[3].schema(), other.region);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.templateName)) {
        this.templateName = data().deepCopy(fields()[4].schema(), other.templateName);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.requestTime)) {
        this.requestTime = data().deepCopy(fields()[5].schema(), other.requestTime);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.responseResultTime)) {
        this.responseResultTime = data().deepCopy(fields()[6].schema(), other.responseResultTime);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.source)) {
        this.source = data().deepCopy(fields()[7].schema(), other.source);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.status)) {
        this.status = data().deepCopy(fields()[8].schema(), other.status);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'dataSourceId' field.
      * @return The value.
      */
    public java.lang.Long getDataSourceId() {
      return dataSourceId;
    }

    /**
      * Sets the value of the 'dataSourceId' field.
      * @param value The value of 'dataSourceId'.
      * @return This builder.
      */
    public com.datacloud.cybertron.protocol.avro.DataSourceExecutionCommonRecord.Builder setDataSourceId(java.lang.Long value) {
      validate(fields()[0], value);
      this.dataSourceId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'dataSourceId' field has been set.
      * @return True if the 'dataSourceId' field has been set, false otherwise.
      */
    public boolean hasDataSourceId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'dataSourceId' field.
      * @return This builder.
      */
    public com.datacloud.cybertron.protocol.avro.DataSourceExecutionCommonRecord.Builder clearDataSourceId() {
      dataSourceId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'tenantId' field.
      * @return The value.
      */
    public java.lang.Long getTenantId() {
      return tenantId;
    }

    /**
      * Sets the value of the 'tenantId' field.
      * @param value The value of 'tenantId'.
      * @return This builder.
      */
    public com.datacloud.cybertron.protocol.avro.DataSourceExecutionCommonRecord.Builder setTenantId(java.lang.Long value) {
      validate(fields()[1], value);
      this.tenantId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'tenantId' field has been set.
      * @return True if the 'tenantId' field has been set, false otherwise.
      */
    public boolean hasTenantId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'tenantId' field.
      * @return This builder.
      */
    public com.datacloud.cybertron.protocol.avro.DataSourceExecutionCommonRecord.Builder clearTenantId() {
      tenantId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'requestId' field.
      * @return The value.
      */
    public java.lang.String getRequestId() {
      return requestId;
    }

    /**
      * Sets the value of the 'requestId' field.
      * @param value The value of 'requestId'.
      * @return This builder.
      */
    public com.datacloud.cybertron.protocol.avro.DataSourceExecutionCommonRecord.Builder setRequestId(java.lang.String value) {
      validate(fields()[2], value);
      this.requestId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'requestId' field has been set.
      * @return True if the 'requestId' field has been set, false otherwise.
      */
    public boolean hasRequestId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'requestId' field.
      * @return This builder.
      */
    public com.datacloud.cybertron.protocol.avro.DataSourceExecutionCommonRecord.Builder clearRequestId() {
      requestId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'region' field.
      * @return The value.
      */
    public java.lang.String getRegion() {
      return region;
    }

    /**
      * Sets the value of the 'region' field.
      * @param value The value of 'region'.
      * @return This builder.
      */
    public com.datacloud.cybertron.protocol.avro.DataSourceExecutionCommonRecord.Builder setRegion(java.lang.String value) {
      validate(fields()[3], value);
      this.region = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'region' field has been set.
      * @return True if the 'region' field has been set, false otherwise.
      */
    public boolean hasRegion() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'region' field.
      * @return This builder.
      */
    public com.datacloud.cybertron.protocol.avro.DataSourceExecutionCommonRecord.Builder clearRegion() {
      region = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'templateName' field.
      * @return The value.
      */
    public java.lang.String getTemplateName() {
      return templateName;
    }

    /**
      * Sets the value of the 'templateName' field.
      * @param value The value of 'templateName'.
      * @return This builder.
      */
    public com.datacloud.cybertron.protocol.avro.DataSourceExecutionCommonRecord.Builder setTemplateName(java.lang.String value) {
      validate(fields()[4], value);
      this.templateName = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'templateName' field has been set.
      * @return True if the 'templateName' field has been set, false otherwise.
      */
    public boolean hasTemplateName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'templateName' field.
      * @return This builder.
      */
    public com.datacloud.cybertron.protocol.avro.DataSourceExecutionCommonRecord.Builder clearTemplateName() {
      templateName = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'requestTime' field.
      * @return The value.
      */
    public java.lang.Long getRequestTime() {
      return requestTime;
    }

    /**
      * Sets the value of the 'requestTime' field.
      * @param value The value of 'requestTime'.
      * @return This builder.
      */
    public com.datacloud.cybertron.protocol.avro.DataSourceExecutionCommonRecord.Builder setRequestTime(java.lang.Long value) {
      validate(fields()[5], value);
      this.requestTime = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'requestTime' field has been set.
      * @return True if the 'requestTime' field has been set, false otherwise.
      */
    public boolean hasRequestTime() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'requestTime' field.
      * @return This builder.
      */
    public com.datacloud.cybertron.protocol.avro.DataSourceExecutionCommonRecord.Builder clearRequestTime() {
      requestTime = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'responseResultTime' field.
      * @return The value.
      */
    public java.lang.Long getResponseResultTime() {
      return responseResultTime;
    }

    /**
      * Sets the value of the 'responseResultTime' field.
      * @param value The value of 'responseResultTime'.
      * @return This builder.
      */
    public com.datacloud.cybertron.protocol.avro.DataSourceExecutionCommonRecord.Builder setResponseResultTime(java.lang.Long value) {
      validate(fields()[6], value);
      this.responseResultTime = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'responseResultTime' field has been set.
      * @return True if the 'responseResultTime' field has been set, false otherwise.
      */
    public boolean hasResponseResultTime() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'responseResultTime' field.
      * @return This builder.
      */
    public com.datacloud.cybertron.protocol.avro.DataSourceExecutionCommonRecord.Builder clearResponseResultTime() {
      responseResultTime = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'source' field.
      * @return The value.
      */
    public java.lang.String getSource() {
      return source;
    }

    /**
      * Sets the value of the 'source' field.
      * @param value The value of 'source'.
      * @return This builder.
      */
    public com.datacloud.cybertron.protocol.avro.DataSourceExecutionCommonRecord.Builder setSource(java.lang.String value) {
      validate(fields()[7], value);
      this.source = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'source' field.
      * @return This builder.
      */
    public com.datacloud.cybertron.protocol.avro.DataSourceExecutionCommonRecord.Builder clearSource() {
      source = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.String getStatus() {
      return status;
    }

    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.datacloud.cybertron.protocol.avro.DataSourceExecutionCommonRecord.Builder setStatus(java.lang.String value) {
      validate(fields()[8], value);
      this.status = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.datacloud.cybertron.protocol.avro.DataSourceExecutionCommonRecord.Builder clearStatus() {
      status = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DataSourceExecutionCommonRecord build() {
      try {
        DataSourceExecutionCommonRecord record = new DataSourceExecutionCommonRecord();
        record.dataSourceId = fieldSetFlags()[0] ? this.dataSourceId : (java.lang.Long) defaultValue(fields()[0]);
        record.tenantId = fieldSetFlags()[1] ? this.tenantId : (java.lang.Long) defaultValue(fields()[1]);
        record.requestId = fieldSetFlags()[2] ? this.requestId : (java.lang.String) defaultValue(fields()[2]);
        record.region = fieldSetFlags()[3] ? this.region : (java.lang.String) defaultValue(fields()[3]);
        record.templateName = fieldSetFlags()[4] ? this.templateName : (java.lang.String) defaultValue(fields()[4]);
        record.requestTime = fieldSetFlags()[5] ? this.requestTime : (java.lang.Long) defaultValue(fields()[5]);
        record.responseResultTime = fieldSetFlags()[6] ? this.responseResultTime : (java.lang.Long) defaultValue(fields()[6]);
        record.source = fieldSetFlags()[7] ? this.source : (java.lang.String) defaultValue(fields()[7]);
        record.status = fieldSetFlags()[8] ? this.status : (java.lang.String) defaultValue(fields()[8]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DataSourceExecutionCommonRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<DataSourceExecutionCommonRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DataSourceExecutionCommonRecord>
    READER$ = (org.apache.avro.io.DatumReader<DataSourceExecutionCommonRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
