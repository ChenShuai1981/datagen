/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MyRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3367142639667768250L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MyRecord\",\"namespace\":\"com.example\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"birthday\",\"type\":\"long\",\"logicalType\":\"date\"},{\"name\":\"ts\",\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MyRecord> ENCODER =
      new BinaryMessageEncoder<MyRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MyRecord> DECODER =
      new BinaryMessageDecoder<MyRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<MyRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<MyRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MyRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this MyRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a MyRecord from a ByteBuffer. */
  public static MyRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String id;
  @Deprecated public long birthday;
  @Deprecated public long ts;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MyRecord() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param birthday The new value for birthday
   * @param ts The new value for ts
   */
  public MyRecord(java.lang.String id, java.lang.Long birthday, java.lang.Long ts) {
    this.id = id;
    this.birthday = birthday;
    this.ts = ts;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return birthday;
    case 2: return ts;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.String)value$; break;
    case 1: birthday = (java.lang.Long)value$; break;
    case 2: ts = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'birthday' field.
   * @return The value of the 'birthday' field.
   */
  public java.lang.Long getBirthday() {
    return birthday;
  }

  /**
   * Sets the value of the 'birthday' field.
   * @param value the value to set.
   */
  public void setBirthday(java.lang.Long value) {
    this.birthday = value;
  }

  /**
   * Gets the value of the 'ts' field.
   * @return The value of the 'ts' field.
   */
  public java.lang.Long getTs() {
    return ts;
  }

  /**
   * Sets the value of the 'ts' field.
   * @param value the value to set.
   */
  public void setTs(java.lang.Long value) {
    this.ts = value;
  }

  /**
   * Creates a new MyRecord RecordBuilder.
   * @return A new MyRecord RecordBuilder
   */
  public static com.example.MyRecord.Builder newBuilder() {
    return new com.example.MyRecord.Builder();
  }

  /**
   * Creates a new MyRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MyRecord RecordBuilder
   */
  public static com.example.MyRecord.Builder newBuilder(com.example.MyRecord.Builder other) {
    return new com.example.MyRecord.Builder(other);
  }

  /**
   * Creates a new MyRecord RecordBuilder by copying an existing MyRecord instance.
   * @param other The existing instance to copy.
   * @return A new MyRecord RecordBuilder
   */
  public static com.example.MyRecord.Builder newBuilder(com.example.MyRecord other) {
    return new com.example.MyRecord.Builder(other);
  }

  /**
   * RecordBuilder for MyRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MyRecord>
    implements org.apache.avro.data.RecordBuilder<MyRecord> {

    private java.lang.String id;
    private long birthday;
    private long ts;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.MyRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.birthday)) {
        this.birthday = data().deepCopy(fields()[1].schema(), other.birthday);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ts)) {
        this.ts = data().deepCopy(fields()[2].schema(), other.ts);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing MyRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.MyRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.birthday)) {
        this.birthday = data().deepCopy(fields()[1].schema(), other.birthday);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ts)) {
        this.ts = data().deepCopy(fields()[2].schema(), other.ts);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.example.MyRecord.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.example.MyRecord.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'birthday' field.
      * @return The value.
      */
    public java.lang.Long getBirthday() {
      return birthday;
    }

    /**
      * Sets the value of the 'birthday' field.
      * @param value The value of 'birthday'.
      * @return This builder.
      */
    public com.example.MyRecord.Builder setBirthday(long value) {
      validate(fields()[1], value);
      this.birthday = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'birthday' field has been set.
      * @return True if the 'birthday' field has been set, false otherwise.
      */
    public boolean hasBirthday() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'birthday' field.
      * @return This builder.
      */
    public com.example.MyRecord.Builder clearBirthday() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'ts' field.
      * @return The value.
      */
    public java.lang.Long getTs() {
      return ts;
    }

    /**
      * Sets the value of the 'ts' field.
      * @param value The value of 'ts'.
      * @return This builder.
      */
    public com.example.MyRecord.Builder setTs(long value) {
      validate(fields()[2], value);
      this.ts = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'ts' field has been set.
      * @return True if the 'ts' field has been set, false otherwise.
      */
    public boolean hasTs() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'ts' field.
      * @return This builder.
      */
    public com.example.MyRecord.Builder clearTs() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MyRecord build() {
      try {
        MyRecord record = new MyRecord();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.birthday = fieldSetFlags()[1] ? this.birthday : (java.lang.Long) defaultValue(fields()[1]);
        record.ts = fieldSetFlags()[2] ? this.ts : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MyRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<MyRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MyRecord>
    READER$ = (org.apache.avro.io.DatumReader<MyRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
